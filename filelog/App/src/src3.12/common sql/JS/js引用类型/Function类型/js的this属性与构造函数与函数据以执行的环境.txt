<!DOCTYPE html>
<html>
<body>

<script>
var color='redss';
var abc='abc';
function thisTestt(){
var this1=this;
this.abc = 1//借助this 我们可以使用new 构造函数 直接使用属性了。
var color='thisTestt';//this 始终指向函数据以当前执行的环境对象
function thisTest(){
var color='black';
var this2=this;
document.write('<br/>');
document.write("ss:"+this.color);

}
document.write('<br/>');
document.write("+++:--"+this.color);
thisTest();//很奇怪这个函数执行环境竟然是再windows中。

}

thisTestt();

function test(){
var color='test o';
document.write(this.color);

}
document.write('<br/>');

var o={};
o.color='this is o.color';
o.functionMethod=thisTestt;
o.functiontest=test;
document.write('<br/>');
document.write('+functionMethod+');
o.functionMethod();
document.write('<br/>');
document.write('+functiontest+');
document.write('<br/>');
o.functiontest();//此时函数据以指向的的环境对象是o而不是windows
document.write('<br/>');
document.write('Test构造函数');
document.write('<br/>');

var classTest =new thisTestt();
document.write('<br/>');
document.write(classTest.color);
document.write('<br/>');
document.write(classTest.abc);
classTest.thisTest();//很奇怪这个函数执行环境竟然还是再windows中。


</script>


</body>
</html> 
